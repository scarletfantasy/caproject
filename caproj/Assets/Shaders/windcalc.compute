// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#include "UnityCG.cginc"
CBUFFER_START(Params)
	int width;
	int height;
	int depth;
CBUFFER_END
RWTexture2D<float4> Result;
RWTexture3D<float4> Wind;

[numthreads(8,8,8)]
void CSMain(uint3 id : SV_DispatchThreadID, uint3 groupid : SV_GroupID, uint3 threadid : SV_GroupThreadID)
{
    // TODO: insert actual code here!
    int3 coord = id.xyz;
	float4 vel = Wind.Load(coord);
	float tmp = (id.z) / 16.0;
	
    int3 off[6];
    off[0] = int3(1, 0, 0);
    off[1] = int3(-1, 0, 0);
    off[2] = int3(0, 1, 0);
    off[3] = int3(0, -1, 0);
    off[4] = int3(0, 0, 1);
    off[5] = int3(0, 0, -1);
    for (int i = 0; i < 6;++i)
    {
        int3 ncoord = clamp(off[i] + coord, int3(0, 0, 0), int3(15, 15, 15));
        vel += Wind.Load(ncoord);
    }
    vel = vel / 7.0;
    Wind[int3(coord.x, coord.y, coord.z)] = vel;

}
