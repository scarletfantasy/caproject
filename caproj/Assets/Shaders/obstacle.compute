// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
#include "UnityCG.cginc"
#define FLOATSIZE (1<<16)
CBUFFER_START(Params)
int width;
int height;
int depth;
float m_dt;
int n;
CBUFFER_END
RWTexture3D<float4> Wind;
RWBuffer<float4> mincs;
RWBuffer<float4> maxcs;



[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID, uint3 groupid : SV_GroupID, uint3 threadid : SV_GroupThreadID)
{
    // TODO: insert actual code here!
    int3 coord = id.xyz;
    float4 vel = Wind.Load(coord);
    float3 sum = float3(0, 0, 0);
    for (int i = 0; i < n;++i)
    {
        float4 mid = (mincs[i] + maxcs[i]) / 2.0;
       
        if (length(mid.xyz - float3(id.x, id.y , id.z )) < 0.5)
        {
            float3 nmin = max(id.xyz, mincs[i]);
            float3 nmax = min(float3(id.x+1,id.y+1,id.z+1), maxcs[i]);
            float3 nv = nmax - nmin;
            float v = nv.x * nv.y * nv.z;
            sum += v;
           // Wind[id.xyz] = float4(0, 0, 0, 1.0);
        }
        

    }

    Wind[id.xyz] = float4(vel.xyz * (1 - sum*0.5 ),1.0);
    

    
    

}
